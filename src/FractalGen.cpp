#include "FractalFitness.hpp"
#include <libHierGA/HierGA.hpp>
#include <string>

namespace std;

int main(void) {
	int numTransforms = 5;

	//TODO: Implement proper support for non-discrete gene pools
	//This is an acceptable hack for now
	const double TRANSFORM_COEFS[] = {-1, -0.9, -0.8, -0.7, -0.6, -0.5,
                                          -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2,
                                          0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1};

	const string VARIATIONS[] = {"linear", "flatten", "sinusoidal",
                             "spherical", "swirl", "horseshoe", "polar",
                             "disc", "spiral", "hyperbolic", "diamond",
                             "eyefish", "bubble", "cylinder"};

	GenePool *** baseGenes = (GenePool***)malloc(sizeof(GenePool**) * numTransforms);

	for (int i = 0; i < numTransforms; i++) {
		//Each transform has 7 parameters
		//One variation, and the 6 coefficient locations
		//In practice, multiple variations for a single transform
		//are possible, but we'll keep it simple for now
		//TODO: Make it possible for one transform to use multiple
		//variations
		baseGenes[i] = (GenePool**)malloc(sizeof(GenePool*) * 7);
		baseGenes[i][0] = new NonHierarchicalGenePool<string>(VARIATIONS, sizeof(VARATIONS)/sizeof(string));

		for (int k = 1; k < 7; k++) {
			baseGenes[i][k] = new NonHierarchicalGenePool<double>(TRANSFORM_COEFS, 21);
		}
	}

	//Set up the bottom level of the hierarchy
	//Each Individual at this level deals with parameters for transforms
	SelectionStrategy ** bottomStrategies = (SelectionStrategy**)malloc(sizeof(SelectionStrategy*) * numTransforms);
	GenerationModel ** bottomLevelModels = (GenerationModel**)malloc(sizeof(GenerationModel*) * numTransforms);
	CrossoverOperation ** bottomLevelCrossovers = (CrossoverOperation**)malloc(sizeof(CrossoverOperation*) * numTransforms);
	MutationOperation ** bottomLevelMutations = (MutationOperation**)malloc(sizeof(MutationOperation*) * numTransforms);

	FitnessPropagator * myPropagator = new DownPropagator();
	ToStringFunction * fractToString = new FractalToString(numTransforms);
	ToStringFunction * xformToString = new TransformToString();
	
	for (int i = 0; i < numTransforms; i++) {
		bottomLevelStrategies[i] = new TournamentSelection(0.5);
		bottomLevelModels[i] = new GAGeneration(2, bottomLevelStrategies[i]);
		bottomLevelCrossovers[i] = new NPointCrossover(2);
		bottomLevelMutations[i] = new UniformMutation(0.2);
	}

	GenePool ** bottomPools = (GenePool**)malloc(sizeof(GenePool*)*(numTransforms+1));

	//Set up the transform gene pools - each one represents one
	//transform
	for (int i = 0; i < numTransforms; i++) {
		Individual * templateIndividual = new Individual(baseGenes[i], 7, bottomLevelCrossovers[i], bottomLevelMutations[i], NULL, xformToString);
		bottomPools[i] = new HierarchicalGenePool(10, templateIndividual, 100, 1, bottomLevelModels[i], NULL, myPropagator);

		delete(templateIndividual);
	}

	//This level deals with the entire fractal - the genome represents
	//all of our transforms, plus a colour gradient

	//TODO: Figure out how Apophysis handles the fractal palette - this
	//will do for now
	//These are gradients that are known by manual experimentation to 
	//produce visually interesting results
	const string GRADIENTS = {
	"      00000003000501000C00011302051A040921060C24091028\n"
	"      0F1736111A3D141E4416214A1825511925581A255F1A2663\n"
	"      1B27681F2978202B7F222D86232D8A242D8E242B8E24298E\n"
	"      22238E23238E25248E26258E28278E29288E2B2A8E2A298E\n"
	"      26258E24218E221E8C211C8A201A861F18831F17811F177F\n"
	"      1F16781F157320146E1B1169170F65160E62160E5F170D58\n"
	"      170D52140A4312083A1107320F052B0E03240E02220E0220\n"
	"      0C00160B00120A000F09000D08000C07000B07000B07000A\n"
	"      07000B0502120D0B1716141D1A18201E1D24272629303030\n"
	"      3939393E3E3E44444448474A4C4A514B49534B48554D495C\n"
	"      504A62524D71534E7855507F5651825853865C5A8D63618E\n"
	"      706D8E73708E76748E74738E73728E72728E6E6E8E68698E\n"
	"      62658E525784474C7F3C427B363C78313676293075222B74\n"
	"      1E2C731E30721F35711F35711F36711F3873213B73213B71\n"
	"      203A6F2038652038632139611F335A1C2F55182A50142449\n"
	"      0F1C40121D3E151F3C17203C1A223C2129402B3245343A4C\n"
	"      3C43534C515C4F525D52545E57595E5A5A5C595959585858\n"
	"      575757565656555555555555555555515151505050505050\n"
	"      5151515A5A5A5D5D5D616161676767686A6A686D6F6B7174\n"
	"      6E79806E7B836E7D866E7F896E818D6D828E6C818E6B818E\n"
	"      687E8E5F768E5D748E5C738E5A708E576B8E566A8E56698E\n"
	"      57678E57678E57678E5A6A8E5C6B8E5F6D8D626E8A636D86\n"
	"      646B7F656A7A63667463646F60616A5D5D68595965575763\n"
	"      4E4D5C4C4A5B4A485A444259403D593D3859383359353059\n"
	"      332D59302C59312B592E29592E29592C285C282461252265\n"
	"      2021691E1F6E191C711417741217790E157E0D16820F1B86\n"
	"      101E8B111F8E111F8E111D8E111D8E111D8E11198E11178E\n"
	"      11178E11178E11178E11198E111B8D0F19880D16800A1579\n"
	"      081271050E68020C5F000955000B4C00084300093C000733\n"
	"      00052B00032200001B00001203000A020003000000000000\n"
	"      000000000000000000000000000000000000000000000000\n"
	"      000000000000000000000000000000000000000000000000\n",

	"      E1B5A9E0ADA2E0A59CE2948DE3877EE57B6EE16F62D95F4E\n"
	"      DB5F52DE5F56E0635BE26760EC726BF07C75DD8782CD8786\n"
	"      BD878AB4868CAB868E9C848F92808C867C847C72785F555B\n"
	"      594F5454494D4C41444E41425547446451497E6558876859\n"
	"      916B5B946B59986B589C6A56A16854A36752A166539D584C\n"
	"      9A5346974E419143338C3626882B1784240D87260A8C3012\n"
	"      913A1B954021994628A15034A6523DA7543FA6523F965341\n"
	"      9255428E58448362497762516B64545F60514146423A3F3C\n"
	"      33393629332A232D23202A1F1E2A1B1A291B1B241B1C1A1C\n"
	"      1E171A2115192B1015390F0F44110C5314086C1D12702015\n"
	"      7424197F2B208B3024963426A03922AC391EB53A1BBD3C1A\n"
	"      C3401BC7411CC8401EC73F1CC73B17C73411C82B06C72A04\n"
	"      C72903C42601BF2400B62000AA1D009E1400911100840F01\n"
	"      770D016C0F035F110551160747180A3E170B3C170C3E160B\n"
	"      45140A53110B60120B71150C80160D8F160D9E170CA9160A\n"
	"      B21209B9100ABD1012BD121BBC141EBC1820BB1C1FB51E1C\n"
	"      AE2016A2201691211B83231F7924237A2A2882322C903D2E\n"
	"      9E4933A7543DAD604DB06A5CB2746AB87E76C28881CD8F89\n"
	"      D3908AD39089CC8C87BE8581AB7B7998767289726C796B62\n"
	"      66615758564C4C4B3F443C303F32254130204B311D51341C\n"
	"      62371F6E39207A351D823018872B158D28128E2B10A2351F\n"
	"      AB402BB44C38B45644B46150B16554AF6A58B07566BA8072\n"
	"      C48B7FD09A8FDCAAA0E2B6ACE9C2B8EAC3BAECC5BDEDC5BD\n"
	"      EAC0B9E8BCB6DDB5AED3AFA7CEAAA1CAA69BBB9080B58070\n"
	"      B07160A45E4D994C3B914331893B287B2D1A6F2310641A0A\n"
	"      62190A60190A5A1A0C551B0E511C0E4E1E0F3D2715372B16\n"
	"      323017313117313218313117323117332F15322F15342C12\n"
	"      3929113E26114A210E571D0C5E1B0B66190A8410058F0D05\n"
	"      9A0A05A00B04A70D04A90E03AB0F03B01102B41301BA1303\n"
	"      B31405AD1608A71809A11B0A97220C8D2A11863A1B8D4326\n"
	"      954C319B583EA2644CA66C55AA745EAF816DB5947ECEB09E\n"
	"      D8BCADE2C9BDE6CEC4EBD4CBF1DAD3F1DFD5E7D0C7E4C2B8\n",

	"      59335A5F336460346C6236745631744B2C74432B743C2B75\n"
	"      2C317929307927307928307C2A317F2D2D7C31297A332679\n"
	"      352478352076331E6D311C652B185625154720123F1C1038\n"
	"      120A1D0B06120503070503070603070A040B0E0610160C1D\n"
	"      190F29301D4C352D5C3A3D6C3A406F3B44733E4374424275\n"
	"      4B4E76564670623E6A6C3A667736637A36637D3763803760\n"
	"      81335E762F52702B4F6A284C66264D62254E5E234E5B224F\n"
	"      4D205647205B4220603F20623D20643D20643D20653E2064\n"
	"      40206145205A421F583F1E563C1D563A1D57361C59351C58\n"
	"      331C58351C56381D553F1D4E471E47491E454C1F43511F40\n"
	"      541F3F5421474F214F4A215747205A45205E3E1F64361D66\n"
	"      2E1A5B2C18512B164828154126153A1E102B160D1E150918\n"
	"      1109110B0713100819160A201A0C261E0F2D271339321845\n"
	"      3F1D53411E56441F59441F5944205945205A44205A44205A\n"
	"      45215A48215F48216249216547236B44236F43217643207B\n"
	"      3C227D3F217943217546217249226F51256A5B2763662D5E\n"
	"      6B2F5968315066314F64314E5D2B4B502A494525443B2041\n"
	"      32173E32173E32173F321740331741351843341842341840\n"
	"      32173F2F153A2B14352814311F1025170C1B130917100811\n"
	"      12090F160A111A0B14240D193413224218304F1D3C561F44\n"
	"      5B224B532C5D4F2F604B33644338693A386935376B33396A\n"
	"      353665363163382D613D2659442153491F4E4D214A4E2347\n"
	"      4F24484F224C51244E52264F5028534C255949235E49215D\n"
	"      441F58421E55401D533B1B4D3719473317412E153C2B1437\n"
	"      2913342912342B14372E163D30184530184C311953321955\n"
	"      341B56331B55311A5330194F321A4C361A4A3A1B4A3A1C4B\n"
	"      3D1D4F411F5545205A46215D47216145226643216B3E206D\n"
	"      3E20703B20723C22733B21723C216E3D206B412268452264\n"
	"      48236049225F49215F4A215F4D225F552761622E62703763\n"
	"      813A5F95445FA5495FAC5366AD5162B3555FB15059A64B5E\n"
	"      9040607F3A6172345C6A2E5B5E275A5521574E1E52491C4D\n"
	"      411A493C19423A173C3815383818383419383F224547294E\n",

	"      006EDB006EDE086BDF1069E11367E11766E21864E11A63E1\n"
	"      2A59E0275ADC255BD92456D42452D02753C32B55B72E58B3\n"
	"      325BAF446AA249759C4E809758889062918A6895866E9A83\n"
	"      77A97576A87875A87C78A8787BA9757FA77183A66D8A9E66\n"
	"      8C955982973C849A2E879E2193A3139FA805A4A804AAA904\n"
	"      B4A505AFA008AA9C0BA68F10A382159D79159871158E6315\n"
	"      8556167148106F47086D46006B42006A3F00663E00633D00\n"
	"      5440004F3D004B3A0041390538380B3135122A331A1C3628\n"
	"      0E3A36024652034E5E05566B055971055D78056685056E91\n"
	"      017EAA0084B7008AC40092D2009BE000A0E700A5EE00B3F3\n"
	"      00C2F600DAEC00E0E300E7DB00E8D600E9D200E8C607E4B8\n"
	"      0FD49C12C89115BD8615B78215B17E19A97C1E9E7521946D\n"
	"      218A64217F52227F43247F35267F2E287F27278019287910\n"
	"      20670C1A6210155D15125B15105915095215024716003A1D\n"
	"      00351D003A1D004019004716005113005C0C006407006D07\n"
	"      008300008D00009800009900009B00029800059800079800\n"
	"      089B00089400089000088D00078500057C00057400047200\n"
	"      057400047200047000036E00026D00017400007400007700\n"
	"      00780000770900750E00741300701A00672300602A005831\n"
	"      00444700424C00415100405800416000416400466908466B\n"
	"      15486E2F546A3556663C596348625B4F67545B6951606B52\n"
	"      6D6A4F72694F78694F8367548E63559C6654AA6A58BA7056\n"
	"      C87555D68251E08D4EE89A46EBA83DE8B636E1C22CD7D328\n"
	"      BEE239B7E43DB1E741A5EB5298EB608CE86E7FE77975E487\n"
	"      71E0956ADAA163D4AC64CDB060C8AD59C4AA51B7A948A9A6\n"
	"      469FA64194A23F8C9F3A859B367E9A397B973D77943D758E\n"
	"      477187526D855D69836762806B5982744F827C4682873C82\n"
	"      903280952A7F94277B9427778D2C7487336D7F3D6E7B4A75\n"
	"      75527C6A59895F5F955460A24B60AC445DB6405BC13556CB\n"
	"      2A55D61E56E21559E8085CEB0064EE006DF00075F5007EFC\n"
	"      0087FF0090FF0095FF009AFF009CFF009CFF009BFF0095FF\n"
	"      0090FC008AF20083E9007EE10079DB0078DA0078DA0072DA\n",

	"      13358914348715348615317C122A6E05174F021046000A3E\n"
	"      00063A00033600023500013400003700003B00013F000143\n"
	"      00024800024900034A00044B00044C010652030959060C61\n"
	"      070E6808116F0C197A10248514389313409E1348AA1352B0\n"
	"      135DB71464B8156BBA156EC2146BC91056CB0E52CA0C4FC9\n"
	"      0C4DC90C4BCA1146C7103AC30E29B00A26A706239E06219A\n"
	"      071F96081E8D0A1A8609137F050E78020A6E030C6A040E66\n"
	"      040E64050E6204115F04135D07165309164A0C16420C163F\n"
	"      0C163D0A163B081439071138081035090E38080D39070C3A\n"
	"      030A3E010A40020B42040F45132257192A621F326D1E336D\n"
	"      1E356D2136682437692839692938691C2A51182349151C41\n"
	"      1013340D0C2D0A092907072802022C01022D00022F00022E\n"
	"      00022D00022B000128000124000220000319000218000218\n"
	"      00001900011F00022600032F00044000044401044901044F\n"
	"      010453020455010456010456000656010D5902105C031460\n"
	"      061E6A0D2C76183C86244F974D7CBD5787C46293CC709ED7\n"
	"      76A6E06AAAE66BB2ED71C1F376C3F578C1F564B5F14DA8EB\n"
	"      3EA5E83AA1E43A9BE33A8DE02A6AC62562BA205BAF174B9A\n"
	"      1239870B2B74071E6305175102134401103D00133D001740\n"
	"      021D47062252072760082B6E072F79063080073088082A8B\n"
	"      08278B07248A042085021E8301198202177F05187A0C1E75\n"
	"      1527751B337B203C84203E88203E86233C81233B7F213D82\n"
	"      1C398714308A0E2588081B8A05148E021390011393011492\n"
	"      00159101139302138F02138901137C01126A000E5A01094A\n"
	"      02063E02043204042905042205041E06042005052405062A\n"
	"      060830050938060944050A51030B5B030E61011264001567\n"
	"      02136802116702106401106000135E00125D00115C00105C\n"
	"      00135D01165E02185F031A61051C5F081C560B1D4D0D1C47\n"
	"      101B410E173D0C143A0B12390B10380C0E35080C3C040B44\n"
	"      020C4C010E5501105802125B051A68061D7108217A08237E\n"
	"      082682082683082785082583082184061B81041B7D021B79\n"
	"      021B78021B78041C79071E7A13308913348A13388C13368A\n"
}

	//Add the palettes to the genome of our top-level Individuals
	GenePool * palettePool = new NonHierarchicalGenePool<string>(GRADIENTS, 5);

	bottomPools[numTransforms] = palettePool;

	SelectionStrategy * topLevelStrategy = new TournamentSelection(0.5);
	GenerationModel * topLevelModel = new GAGeneration(2, bottomLevelStrategy);
	CrossoverOperation * topLevelCrossover = new NPointCrossover(2);
	MutationOperation * topLevelMutation = new UniformMutation(0.2);
	FitnessFunction * topLevelFunction = new FractalFitness(numTransforms);

	Individual * templateIndividual = new Individual(bottomPools, numTransforms+1, topLevelCrossover, topLevelMutation, topLevelFunction, fractToString);

	GenePool * topLevelPool = new HierarchicalGenePool(10, templateIndividual, 10, 1, topLevelMode, NULL, myPropagator);

	delete(templateIndividual);

	for (int i = 0; i < 10; i++) {
		topLevelPool->runGenerations();
	}
}
